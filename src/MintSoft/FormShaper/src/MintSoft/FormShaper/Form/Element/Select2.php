<?php
/**
 * Created by PhpStorm.
 * User: sokool
 * Date: 02.01.15
 * Time: 15:18
 */

namespace FormShaper\Form\Element;

use Zend\ServiceManager\ServiceLocatorAwareInterface;
use Zend\ServiceManager\ServiceLocatorInterface;

class Select2 extends DataToggle implements ServiceLocatorAwareInterface
{
    protected $toggle = 'zf2-tag';

    protected $toggleAttributes = [
        'minimumInputLength' => 2,
        'emptyFieldText'     => 'Start writing to get result',
        'startSearchingText' => 'At least 2 character...',
        'multiple'           => false,
        'allowCreate'        => true,

        'search_url' => [
            'name'   => null,
            'params' => [],
        ]
    ];

    private $serviceLocator;

    public function setToggleAttribute($name, $value)
    {
        if ($name == 'search_url') {
            $value = $this->assembleRouteName($value['name'], empty($value['params']) ? [] : $value['params']);

            return parent::setToggleAttribute('ajax', ['url' => $value]);
        }

        return parent::setToggleAttribute($name, $value);
    }

    public function setValue($value)
    {
        if(empty($value)) return;
        $this->setToggleAttribute('initSelection', [
            'id'   => $value ,
            'text' => $value
        ]);
        \Nette\Diagnostics\Debugger::barDump($value);

        return parent::setValue($value); // TODO: Change the autogenerated stub
    }

    /**
     * Translate route name into real URL
     * Notice that each name have to be already configured in Router service.
     *
     * @param       $name
     * @param array $params
     *
     * @return mixed
     */
    protected function assembleRouteName($name, array $params = [])
    {
        return $this
            ->getServiceLocator()
            ->get('Router')
            ->getRoute($name)
            ->assemble($params, ['name' => $name]);
    }

    /**
     * Set service locator
     *
     * @param ServiceLocatorInterface $serviceLocator
     */
    public function setServiceLocator(ServiceLocatorInterface $serviceLocator)
    {
        $this->serviceLocator = $serviceLocator->getServiceLocator();
    }

    /**
     * Get service locator
     *
     * @return ServiceLocatorInterface
     */
    public function getServiceLocator()
    {
        return $this->serviceLocator;
    }
} 